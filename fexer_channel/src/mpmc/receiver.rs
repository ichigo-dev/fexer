//------------------------------------------------------------------------------
/// # MPMC channel Receiver
//------------------------------------------------------------------------------

use super::MpmcError;

use std::sync::{ mpsc, Arc, Mutex };


//------------------------------------------------------------------------------
/// Receiver
//------------------------------------------------------------------------------
pub struct Receiver<T>
{
    inner: Arc<Mutex<mpsc::Receiver<T>>>,
}

impl<T> Receiver<T>
{
    //--------------------------------------------------------------------------
    /// Creates a new Receiver.
    //--------------------------------------------------------------------------
    pub fn new( receiver: mpsc::Receiver<T> ) -> Self
    {
        Self
        {
            inner: Arc::new(Mutex::new(receiver)),
        }
    }

    //--------------------------------------------------------------------------
    /// Clones the receiver.
    //--------------------------------------------------------------------------
    pub fn clone( &self ) -> Self
    {
        Self
        {
            inner: self.inner.clone(),
        }
    }

    //--------------------------------------------------------------------------
    /// Receives a message.
    //--------------------------------------------------------------------------
    pub fn recv( &self ) -> Result<T, MpmcError<T>>
    {
        let message = self.inner.lock()?.recv()?;
        Ok(message)
    }

    //--------------------------------------------------------------------------
    /// Tries to receive a message.
    //--------------------------------------------------------------------------
    pub fn try_recv( &self ) -> Result<T, MpmcError<T>>
    {
        let message = self.inner.lock()?.try_recv()?;
        Ok(message)
    }
}
